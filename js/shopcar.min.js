window.addEventListener('load', function() {
    // 表单全选与否
    var all_checked = document.querySelector('#all-checked');
    var allChecked = document.querySelector('#allChecked');
    var s_checkboxs = document.querySelectorAll('.s-checkbox');
    all_checked.onclick = function() {
        for (let i = 0; i < s_checkboxs.length; i++) {
            // 让子复选框和副全选框的状态跟随全选框的状态
            s_checkboxs[i].checked = allChecked.checked = this.checked;
            // 子复选框选中之后li要加上类名（背景色）
            s_checkboxs[i].onchange();
            // s_checkboxs[i].parentNode.parentNode.classList.toggle('checked'); 会有bug，颜色不同步
        }
    }
    allChecked.onclick = function() {
        for (let i = 0; i < s_checkboxs.length; i++) {
            s_checkboxs[i].checked = all_checked.checked = this.checked;
            s_checkboxs[i].onchange();
        }
    }
    for (let i = 0; i < s_checkboxs.length; i++) {
        s_checkboxs[i].onclick = function() {
            // flag控制全选按钮是否被选中
            let flag = true;
            // 每次点击下面的复选框都要循环检查是否其他的也都有被选中，只有下面的全被选中，全选的才会打勾
            for (let i = 0; i < s_checkboxs.length; i++) {
                if (!s_checkboxs[i].checked) {
                    flag = false;
                    break; // 提高程序执行效率，只要有一个没被选中就退出循环
                }
            }
            all_checked.checked = allChecked.checked = flag;
        }
        s_checkboxs[i].onchange = function() {
            // classList属性操作类名（IE10以后）优于className
            if (s_checkboxs[i].checked) {
                // 添加类名（在之前的基础上追加，不会覆盖之前的）
                this.parentNode.parentNode.classList.add('checked');
                // 如何做到一一对应记录每一个复选框的选中状态呢？
                // localStorage.setItem('checked', true);
            } else {
                // 删除类名
                this.parentNode.parentNode.classList.remove('checked');
                // localStorage.removeItem('checked');
            }
            // 切换类名（第一次点击添加类名，第二次点击移除类名；只适用于最初未被选中的复选框）
            // this.parentNode.parentNode.classList.toggle('checked');
        };
        /*  if (localStorage.getItem('checked')) {
             s_checkboxs[i].checked = localStorage.getItem('checked');
         } */
    }
    // 数量、小计、操作
    var cart_tbody = document.querySelector('.cart-tbody');
    var decrease_btns = document.querySelectorAll('.decrease');
    var increase_btns = document.querySelectorAll('.increase');
    var counts = document.querySelectorAll('.countNum');
    var unit_prices = document.querySelectorAll('.unit-price');
    var subtotals = document.querySelectorAll('.subtotal');
    var total_price = document.querySelector('.total-price');
    var dels = document.querySelectorAll('.del');
    // 以上DOM元素的数量与索引皆是一一对应的
    for (let i = 0; i < decrease_btns.length; i++) {
        let num = 1;
        decrease_btns[i].onclick = function() {
            counts[i].value = num--;
            if (counts[i].value == 1) {
                decrease_btns[i].disabled = true;
                decrease_btns[i].classList.add('disabled');
            } else if (counts[i].value >= 2) {
                decrease_btns[i].disabled = false;
                decrease_btns[i].classList.remove('disabled');
            }
        }
        increase_btns[i].onclick = function() {
            counts[i].value = num++;
        };
        // subtotals[i].innerHTML = unit_prices[i].innerHTML * counts[i].value; ——>NaN(￥)
        dels[i].onclick = function() {
            // 说明：如果点击确定，则confirm()返回true；点击取消，返回false；在用户对其作出响应前，js代码将暂停执行(共同点)
            // <vs> prompt() 如果点击取消，返回null；点击确定，返回输入字段文本内容
            let decision = confirm('你确定要删除该商品吗？');
            if (decision == true) {
                cart_tbody.removeChild(this.parentNode.parentNode);
            }
        }
    }
})